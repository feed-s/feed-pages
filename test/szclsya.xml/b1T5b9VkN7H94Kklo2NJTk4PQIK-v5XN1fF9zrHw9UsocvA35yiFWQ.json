{
  "url": "https://szclsya.me/zh-cn/posts/net/send-email-with-netcat/",
  "title": "发邮件，但只用 netcat - Leo's Field",
  "description": "Arrow Back            更多文章                                      View English Version                      又：为什么纯文本协议是好文明        发邮件听上去是个很复杂的工作——事实上，在几十年的对抗垃圾邮件的战争后，发邮件*的确*是个很复杂的工作（光 IETF RFC...",
  "links": [
    "https://szclsya.me/zh-cn/posts/net/send-email-with-netcat/"
  ],
  "image": "https://szclsya.me/zh-cn/posts/net/send-email-with-netcat/favicon.svg",
  "content": "<div>\n        <p>\n          <a target=\"_blank\" href=\"https://szclsya.me/zh-cn/posts\">\n            <svg>Arrow Back</svg>\n            <span>更多文章</span>\n          </a><a target=\"_blank\" href=\"https://szclsya.me/posts/net/send-email-with-netcat/\">\n              <svg width=\"24px\"></svg>\n              <span>View English Version</span>\n            </a></p>\n          <h2>又：为什么纯文本协议是好文明</h2>\n        <article>\n<p>\n发邮件听上去是个很复杂的工作——事实上，在几十年的对抗垃圾邮件的战争后，发邮件*的确*是个很复杂的工作（光 IETF RFC 就有至少九个！<sup><a target=\"_blank\" href=\"https://szclsya.me/zh-cn/posts/net/send-email-with-netcat/#footnote-1\">1</a></sup>），直接导致了大多数个人与组织都选择那几个大邮件运营商中的一个，完全违背了邮件协议开放的初衷。</p>\n<p>\n但我们今天不是来抱怨这个的。其实大部分这些邮件黑魔法都是由邮件服务处理的，作为用户，我们只需要把想发的邮件提交到服务器即可；而这部分其实并不复杂。我们读邮件的方式有好几次大变化（POP1 -&gt; <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Post_Office_Protocol\">POP3</a> -&gt; <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Internet_Message_Access_Protocol\">IMAP</a>），但是发邮件还在用 <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol\">SMTP</a>，和 80 年代那会并没什么不一样。而由于 SMTP 使用纯文本协议，我们完全可以只用 <code>netcat</code> 发邮件！</p>\n<div>\n<h2 id=\"headline-1\">\n选择 netcat 实现\n</h2>\n<div>\n<p><span>太长不看：</span> 使用 <code>Nmap</code> 项目提供的 <code>ncat</code> 即可。如果可以接受明文传输的话（坏主意！），OpenBSD 项目的 <code>netcat</code> 实现也能用。</p>\n<p>\n等等，netcat 还有好几种的？功能还不一样？没错！简直让人觉得每个学网络和 POSIX API 的人都会搓一个 netcat 来玩玩…… 不过我们只需选择一个具有下列两个功能的实现就行：TLS 和 CRLF 转换。</p>\n<p>\nTLS 支持比较好理解：我们希望和服务器的通讯是加密的，以防 MITM 攻击。其实消息本身明文也就算了，但是在大多数 SMTP 实现上用户名与密码是通过 Base64 传输的，而 Base64 可以轻易地被解码；也就是说如果没有 TLS 的话，攻击者可以轻易获得你的密码！（这就是之前不推荐用明文传输的原因）因此前文推荐 <code>Nmap</code> 的实现，因为目前在广泛使用的客户端中只有这个版本开箱支持 TLS。</p>\n<p>\nCRLF 转换要更微妙些：POSIX 系统（UNIX 和它的朋友们）使用 <code>&lt;LF&gt;</code> 作为换行符，但 Windows 和几乎所有互联网协议（HTTP，SMTP 等）都使用 <code>&lt;CR&gt;&lt;LF&gt;</code> 。所以如果不作任何转换的话，在 UNIX/Linux 环境下在 <code>netcat</code> 里面敲换行会发一个 <code>&lt;LF&gt;</code> 到服务器那一端，这在 SMTP 协议里理论上是违规的。很多服务端（例如 Postfix）能自动识别这种行为，但其他服务端会直接报错（例如 Microsoft Exchange）。既然你已经愿意手敲 SMTP 了，不如做到完美，对吧？目前在广泛使用的 netcat 实现中 <code>OpenBSD</code> 和 <code>Nmap</code> 都（通过一个参数）支持 <code>&lt;CR&gt;&lt;LF&gt;</code> 转换。</p>\n</div>\n</div>\n<div>\n<h2 id=\"headline-2\">\n建立连接\n</h2>\n<div>\n<p>\n首先我们需要建立到邮件服务器的连接。这里我使用我（部分）维护的服务器， <a target=\"_blank\" href=\"https://wiki.csclub.uwaterloo.ca/Mail\">UWaterloo CSC 的邮件服务器</a>。如果你准备用 TLS 连接的话，请注意使用 <code>TLS/SSL</code> 的端口而不是 <code>STARTTLS</code> 的端口，因为 <code>TLS/SSL</code> 会在连接一开始就建立 TLS 连接（和 HTTPS 一样，ncat 支持）而 <code>STARTTLS</code> 是在 SMTP 握手后再建立连接，更不安全（可能有降级攻击）以及不被 ncat 支持。</p>\n<div>\n  <p>\n就如之前所说，在大多数 SMTP 服务器上密码都是通过 Base64 转换后传输的，基本就是明文，所以除非你就坐在服务器旁边的话，尽量使用 TLS 加密。</p>\n</div>\n<div>\n<table><tr><td>\n<pre><code><span> 1\n</span><span> 2\n</span><span> 3\n</span><span> 4\n</span><span> 5\n</span><span> 6\n</span><span> 7\n</span><span> 8\n</span><span> 9\n</span><span>10\n</span></code></pre></td>\n<td>\n<pre><code><span><span><span># 明文连接</span>\n</span></span><span><span><span># 这里使用 OpenBSD netcat, GNU netcat 不支持 -C 参数（使用 CFLF 转换）</span>\n</span></span><span><span>$ nc -C mail.csclub.uwaterloo.ca <span>25</span>\n</span></span><span><span>&gt; <span>220</span> mail.csclub.uwaterloo.ca ESMTP Postfix\n</span></span><span><span>\n</span></span><span><span><span># TLS 加密连接</span>\n</span></span><span><span><span># ncat 一般在 Nmap 包里，debian 系发行版上则是个独立的 ncat 包</span>\n</span></span><span><span><span># 465 是最常见的 SSL/TLS SMTP 端口</span>\n</span></span><span><span>$ ncat -C --ssl mail.csclub.uwaterloo.ca <span>465</span>\n</span></span><span><span>&gt; <span>220</span> mail.csclub.uwaterloo.ca ESMTP Postfix</span></span></code></pre></td></tr></table>\n</div>\n<p>\n服务器则回应 <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/List_of_SMTP_server_return_codes#%E2%80%94_2yz_Positive_completion\">220</a>，代表服务器就绪。</p>\n</div>\n</div>\n<div>\n<h2 id=\"headline-3\">\nSay Hello!\n</h2>\n<div>\n<p>现在该打招呼了。在 SMTP 协议上我们需要发送 <code>EHLO</code> 命令和我们的主机名。主机名主要是用在 SMTP 服务器 <span>之间</span> 的通讯（用来标明发送方的地址，方便通过 rDNS 验证），所以这里并不重要，填上 <code>127.0.0.1</code> 就可以了。</p>\n<p>\n但 <code>EHLO</code> 是什么玩意？其实在原始的 SMTP 协议中的确是用 <code>HELO</code> 握手的，但我们会用 ESMTP （一个现代化的 SMTP 扩展协议）中的 <code>PLAIN</code> 认证方式，所以这里用 ESMTP 标准的握手命令，即 <code>EHLO</code> <sup><a target=\"_blank\" href=\"https://szclsya.me/zh-cn/posts/net/send-email-with-netcat/#footnote-2\">2</a></sup>。</p>\n<div>\n<table><tr><td>\n<pre><code><span> 1\n</span><span> 2\n</span><span> 3\n</span><span> 4\n</span><span> 5\n</span><span> 6\n</span><span> 7\n</span><span> 8\n</span><span> 9\n</span><span>10\n</span><span>11\n</span><span>12\n</span><span>13\n</span></code></pre></td>\n<td>\n<pre><code><span><span><span># Say hello!</span>\n</span></span><span><span>EHLO 127.0.0.1\n</span></span><span><span>&gt; 250-mail.csclub.uwaterloo.ca\n</span></span><span><span>&gt; 250-PIPELINING\n</span></span><span><span>&gt; 250-SIZE <span>52428800</span>\n</span></span><span><span>&gt; 250-ETRN\n</span></span><span><span>&gt; 250-AUTH PLAIN\n</span></span><span><span>&gt; 250-AUTH<span>=</span>PLAIN\n</span></span><span><span>&gt; 250-ENHANCEDSTATUSCODES\n</span></span><span><span>&gt; 250-8BITMIME\n</span></span><span><span>&gt; 250-DSN\n</span></span><span><span>&gt; 250-SMTPUTF8\n</span></span><span><span>&gt; <span>250</span> CHUNKING</span></span></code></pre></td></tr></table>\n</div>\n<p>\n服务器如期返回了它支持的功能。</p>\n</div>\n</div>\n<div>\n<h2 id=\"headline-4\">\n登录\n</h2>\n<div>\n<p>现在该让服务器验证我们的身份了。如前文所述，我们需要用 Base64 编码用户名与密码：</p>\n<div>\n<table><tr><td>\n<pre><code><span>1\n</span></code></pre></td>\n<td>\n<pre><code><span><span><span>echo</span> <span>\"</span><span>$USERNAME</span><span>:</span><span>$PASSWORD</span><span>\"</span> <span>|</span> base64</span></span></code></pre></td></tr></table>\n</div>\n<p>\n然后把编码后的认证信息发给服务器：</p>\n<div>\n<table><tr><td>\n<pre><code><span>1\n</span><span>2\n</span><span>3\n</span><span>4\n</span><span>5\n</span><span>6\n</span><span>7\n</span></code></pre></td>\n<td>\n<pre><code><span><span><span># 告诉服务器我们将使用 PLAIN 认证方式</span>\n</span></span><span><span>AUTH PLAIN\n</span></span><span><span>&gt; <span>334</span>\n</span></span><span><span><span># 然后发送我们的认证信息</span>\n</span></span><span><span><span>[</span>BASE64编码的认证信息<span>]</span>\n</span></span><span><span>&gt; <span>235</span> 2.7.0 Authentication successful\n</span></span><span><span><span># 认证成功</span></span></span></code></pre></td></tr></table>\n</div>\n</div>\n</div>\n<div>\n<h2 id=\"headline-5\">\n终于，该发邮件了\n</h2>\n<div>\n<p>首先我们得告诉服务器这封邮件是从哪个信箱发出的，以及目的地：</p>\n<p>\n然后就是填写邮件内容了。SMTP 会将终止符前的所有数据作为邮件内容发送，并不在乎里面具体是什么。因此，邮件附件不过就是将附件原样塞进邮件内容里，并在前后附上标识和一些元数据罢了。不过这对我们的小实验来说有点太复杂了，我们这里只会发一封简单的纯文本邮件：</p>\n<div>\n<table><tr><td>\n<pre><code><span> 1\n</span><span> 2\n</span><span> 3\n</span><span> 4\n</span><span> 5\n</span><span> 6\n</span><span> 7\n</span><span> 8\n</span><span> 9\n</span><span>10\n</span><span>11\n</span><span>12\n</span><span>13\n</span></code></pre></td>\n<td>\n<pre><code><span><span><span># 告诉服务器接下来是邮件内容段</span>\n</span></span><span><span>DATA\n</span></span><span><span>&gt; <span>354</span> End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;\n</span></span><span><span><span># 用 &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt; 标识内容结束，现实中只需要输入换行，一个英文句号（.）和另一个换行即可</span>\n</span></span><span><span>From: <span>[</span>Leo Shen<span>]</span> &lt;<a target=\"_blank\" href=\"https://szclsya.me/cdn-cgi/l/email-protection\">[email protected]</a>&gt;\n</span></span><span><span>To: &lt;<a target=\"_blank\" href=\"https://szclsya.me/cdn-cgi/l/email-protection\">[email protected]</a>&gt;\n</span></span><span><span>Date: Fri, <span>05</span> Jul <span>2024</span> 17:47:28 -0400\n</span></span><span><span>Subject: Hello from netcat!\n</span></span><span><span>\n</span></span><span><span>此邮件由 <span>`</span>ncat --ssl mail.csclub.uwaterloo.ca 465<span>`</span> 发送。\n</span></span><span><span>\n</span></span><span><span>.\n</span></span><span><span>&gt; <span>250</span> 2.0.0 Ok: queued as 108142E003A</span></span></code></pre></td></tr></table>\n</div>\n<p>\n服务器表示我们的邮件已经被放入待发信件列表了，就像一个真正的邮局一样。</p>\n<p>\n大功告成！然后就可以结束连接了：</p>\n<p>\n如果没问题的话，你的邮件应该不久后就在收件邮箱了。</p>\n</div>\n</div>\n</article>\n    </div>",
  "author": "Leo Shen",
  "favicon": "",
  "source": "szclsya.me",
  "published": "2024-07-05T18:02:14Z",
  "ttr": 73,
  "type": "website"
}